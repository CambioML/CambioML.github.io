name: Check Translation Completeness

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
    branches:
      - main

jobs:
  check-translations:
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Check for en.ts changes and analyze property changes
        id: check_en_changes
        run: |
          echo "🔍 Checking for changes in lib/translations/en.ts..."
          
          # Get the list of changed files in this PR
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          
          echo "Changed files in PR:"
          echo "$CHANGED_FILES"
          
          # Check if en.ts was changed
          EN_TS_CHANGED=$(echo "$CHANGED_FILES" | grep "^lib/translations/en.ts$" || true)
          
          if [ -n "$EN_TS_CHANGED" ]; then
            echo "✅ English translation file changed, analyzing property changes..."
            echo "en_ts_changed=true" >> $GITHUB_OUTPUT
            
            # Run the diff checker to analyze what properties changed
            echo "🔍 Running translation diff checker..."
            DIFF_OUTPUT=$(bun run translate:diff --json 2>/dev/null || echo '{"modifiedProperties":[],"changes":[]}')
            
            echo "Raw diff output:"
            echo "$DIFF_OUTPUT"
            
            # Extract modified properties count and details
            MODIFIED_COUNT=$(echo "$DIFF_OUTPUT" | jq -r '.modifiedProperties | length' 2>/dev/null || echo "0")
            MODIFIED_PROPERTIES=$(echo "$DIFF_OUTPUT" | jq -r '.modifiedProperties[]?' 2>/dev/null | tr '\n' ',' | sed 's/,$//' || echo "")
            
            echo "Modified properties count: $MODIFIED_COUNT"
            echo "Modified properties: $MODIFIED_PROPERTIES"
            
            echo "modified_properties_count=$MODIFIED_COUNT" >> $GITHUB_OUTPUT
            echo "modified_properties<<EOF" >> $GITHUB_OUTPUT
            echo "$MODIFIED_PROPERTIES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            # Store the full diff output for detailed reporting
            echo "property_changes<<EOF" >> $GITHUB_OUTPUT
            echo "$DIFF_OUTPUT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ No changes to lib/translations/en.ts detected"
            echo "en_ts_changed=false" >> $GITHUB_OUTPUT
            echo "modified_properties_count=0" >> $GITHUB_OUTPUT
          fi

      - name: Check translation completeness
        id: check_completeness
        run: |
          echo "🔍 Checking translation completeness..."
          
          # Define supported languages
          LANGUAGES=("de" "ja" "pt" "ru" "it" "ar" "ko" "nl" "hi" "tr" "sv" "pl" "no" "da" "fi" "cs" "hu" "ro")
          
          MISSING_TRANSLATIONS=""
          INCOMPLETE_AREAS=""
          
          # Check blog translations
          if [ -d "blog/en" ]; then
            echo "Checking blog translations..."
            for file in blog/en/*.md; do
              if [ -f "$file" ]; then
                filename=$(basename "$file")
                for lang in "${LANGUAGES[@]}"; do
                  if [ ! -f "blog/$lang/$filename" ]; then
                    MISSING_TRANSLATIONS="$MISSING_TRANSLATIONS\n- Blog: $filename (missing $lang translation)"
                    INCOMPLETE_AREAS="blog"
                  fi
                done
              fi
            done
          fi
          
          # Check resource translations
          if [ -d "resources/en" ]; then
            echo "Checking resource translations..."
            for file in resources/en/*.md; do
              if [ -f "$file" ]; then
                filename=$(basename "$file")
                for lang in "${LANGUAGES[@]}"; do
                  if [ ! -f "resources/$lang/$filename" ]; then
                    MISSING_TRANSLATIONS="$MISSING_TRANSLATIONS\n- Resources: $filename (missing $lang translation)"
                    INCOMPLETE_AREAS="$INCOMPLETE_AREAS resources"
                  fi
                done
              fi
            done
          fi
          
          # Check TypeScript translation files
          echo "Checking TypeScript translation files..."
          for lang in "${LANGUAGES[@]}"; do
            if [ ! -f "lib/translations/$lang.ts" ]; then
              MISSING_TRANSLATIONS="$MISSING_TRANSLATIONS\n- TypeScript translations: $lang.ts missing"
              INCOMPLETE_AREAS="$INCOMPLETE_AREAS typescript"
            fi
          done
          
          # Remove duplicates from incomplete areas
          INCOMPLETE_AREAS=$(echo "$INCOMPLETE_AREAS" | tr ' ' '\n' | sort -u | tr '\n' ' ')
          
          if [ -n "$MISSING_TRANSLATIONS" ]; then
            echo "❌ Translation check failed!"
            echo "Missing translations found:"
            echo -e "$MISSING_TRANSLATIONS"
            echo "translations_complete=false" >> $GITHUB_OUTPUT
            echo "missing_translations<<EOF" >> $GITHUB_OUTPUT
            echo -e "$MISSING_TRANSLATIONS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "incomplete_areas=$INCOMPLETE_AREAS" >> $GITHUB_OUTPUT
          else
            echo "✅ All translations are complete!"
            echo "translations_complete=true" >> $GITHUB_OUTPUT
          fi

      - name: Create translation status check
        uses: actions/github-script@v7
        with:
          script: |
            const isComplete = '${{ steps.check_completeness.outputs.translations_complete }}' === 'true';
            const missingTranslations = String.raw`${{ steps.check_completeness.outputs.missing_translations }}`.replace(/\\n/g, '\n');
            const incompleteAreas = '${{ steps.check_completeness.outputs.incomplete_areas }}';
            
            // Get property change information
            const enTsChanged = '${{ steps.check_en_changes.outputs.en_ts_changed }}' === 'true';
            const modifiedCount = parseInt('${{ steps.check_en_changes.outputs.modified_properties_count }}' || '0');
            const modifiedProperties = '${{ steps.check_en_changes.outputs.modified_properties }}';
            
            let title = '';
            let summary = '';
            let text = '';
            
            if (isComplete) {
              title = '✅ All translations complete';
              summary = 'All required translations are present and up to date.';
              text = 'Ready for deployment! All blog posts, resources, and TypeScript translation files have been translated to all supported languages.';
              
              if (enTsChanged && modifiedCount > 0) {
                title = '✅ All translations complete';
                summary += `\n\n📝 Property changes detected: ${modifiedCount} properties modified in en.ts`;
                text += `\n\n**Property Changes Detected:**\n${modifiedCount} properties were modified in lib/translations/en.ts:\n${modifiedProperties.split(',').map(p => `- ${p}`).join('\n')}`;
              }
            } else {
              title = '❌ Missing translations detected';
              summary = `Missing translations detected in: ${incompleteAreas}\n\nThis PR cannot be merged until all translations are complete.`;
              text = `The following translations are missing:\n${missingTranslations}\n\nPlease wait for the auto-translation workflows to complete, or add the missing translations manually.`;
              
              if (enTsChanged && modifiedCount > 0) {
                summary += `\n\n📝 Additionally, ${modifiedCount} properties were modified in en.ts and may need translation updates.`;
                text += `\n\n**Property Changes Detected:**\n${modifiedCount} properties were modified in lib/translations/en.ts:\n${modifiedProperties.split(',').map(p => `- ${p}`).join('\n')}`;
              }
            }
            
            // Create a check run
            const checkRun = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Translation Completeness',
              head_sha: context.payload.pull_request.head.sha,
              status: 'completed',
              conclusion: isComplete ? 'success' : 'failure',
              output: {
                title: title,
                summary: summary,
                text: text
              }
            });

      - name: Comment on PR with translation status
        uses: actions/github-script@v7
        with:
          script: |
            const isComplete = '${{ steps.check_completeness.outputs.translations_complete }}' === 'true';
            const missingTranslations = String.raw`${{ steps.check_completeness.outputs.missing_translations }}`.replace(/\\n/g, '\n');
            const incompleteAreas = '${{ steps.check_completeness.outputs.incomplete_areas }}';
            
            // Get property change information
            const enTsChanged = '${{ steps.check_en_changes.outputs.en_ts_changed }}' === 'true';
            const modifiedCount = parseInt('${{ steps.check_en_changes.outputs.modified_properties_count }}' || '0');
            const modifiedProperties = '${{ steps.check_en_changes.outputs.modified_properties }}';
            
            let commentBody = '';
            
            if (!isComplete) {
              commentBody = `🚫 **Translation check failed!**

            This PR cannot be merged until all translations are complete.

            **Missing translations in:** ${incompleteAreas}

            **Details:**
            ${missingTranslations}

            **What to do:**
            - Wait for the auto-translation workflows to complete
            - Or add the missing translations manually
            - Re-run this check once translations are added

            The deployment will be blocked until all translations are present.`;
            }
            
            if (enTsChanged && modifiedCount > 0) {
              const propertyChangeInfo = `

            📝 **Property Changes Detected in en.ts**

            ${modifiedCount} translation properties were modified:
            ${modifiedProperties.split(',').map(p => `- \`${p}\``).join('\n')}

            ${isComplete ? '✅ All corresponding translations appear to be up to date.' : '⚠️ These changes may require updates to other language files.'}`;
              
              if (commentBody) {
                commentBody += propertyChangeInfo;
              } else if (!isComplete) {
                // Only comment if there are issues or if we want to highlight property changes
                commentBody = `📝 **Translation Property Changes Detected**

            ${modifiedCount} properties were modified in \`lib/translations/en.ts\`:
            ${modifiedProperties.split(',').map(p => `- \`${p}\``).join('\n')}

            ✅ All translations appear to be complete and up to date.`;
              }
            }
            
            if (commentBody) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            }

      - name: Fail if translations incomplete
        if: steps.check_completeness.outputs.translations_complete == 'false'
        run: |
          echo "❌ Translation check failed - blocking deployment"
          exit 1